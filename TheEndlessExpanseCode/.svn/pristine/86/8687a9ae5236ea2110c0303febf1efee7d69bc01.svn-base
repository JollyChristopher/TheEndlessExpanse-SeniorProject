package halemaster.ee.state;

import com.jme3.app.Application;
import com.jme3.app.state.AppStateManager;
import de.lessvoid.nifty.controls.Label;
import de.lessvoid.nifty.controls.Window;
import de.lessvoid.nifty.elements.Element;
import de.lessvoid.nifty.elements.render.ImageRenderer;
import de.lessvoid.nifty.render.NiftyImage;
import halemaster.ee.world.entity.Entity;

/**
 * @name Hud
 * 
 * @version 0.0.0
 * 
 * @date Oct 24, 2013
 */
public class Hud extends Menu
{
  public static final String FILE = "Interface/menu/hud.xml";
  public static final String ID = "hud";
  private PlayerState player;
  
  public Hud (PlayerState player)
  {
    super (FILE, ID);
    
    this.player = player;
  }
  
  /**
   * Initialize this menu.
   * 
   * @param manager manager to initialize with.
   * @param app application to initialize with.
   */
  @Override
  public void initialize (AppStateManager manager, Application app)
  {
    Label playerName;
    Element playerImage;
    Window characterWindow, invWindow;
    NiftyImage playerNiftyImage;
    Element characterImage;
    Element targetPanel;
    
    super.initialize (manager, app);
    
    playerName = getNifty ().getCurrentScreen ()
            .findNiftyControl ("player_name", Label.class);
    playerImage = getNifty ().getCurrentScreen ().findElementByName 
            ("player_image");
    characterImage = getNifty ().getCurrentScreen ().findElementByName 
            ("window_character_player_image");
    characterWindow = getNifty ().getCurrentScreen ()
            .findNiftyControl ("window_character", Window.class);
    invWindow = getNifty ().getCurrentScreen ()
            .findNiftyControl ("window_inventory", Window.class);
    targetPanel = getNifty ().getCurrentScreen ().findElementByName ("target");
    playerNiftyImage = getNifty ()
            .createImage (this.player.getPlayerImage (), false);
    
    targetPanel.hide ();
    
    playerName.setText (this.player.getPlayerName ());
    playerImage.getRenderer (ImageRenderer.class).setImage (playerNiftyImage); 
    characterImage.getRenderer (ImageRenderer.class).setImage (playerNiftyImage); 
    characterWindow.getElement ().hide ();
    characterWindow.setTitle (this.player.getPlayerName ());
    invWindow.getElement ().hide ();
  }
  
  /**
   * toggle opening of the character window
   * 
   * @return whether the input event was used up
   */
  public boolean openCharacter ()
  {
    Element characterWindow = getNifty ().getCurrentScreen ()
            .findNiftyControl ("window_character", Window.class).getElement ();
    
    
    if (characterWindow.isVisible ())
    {
      characterWindow.hide ();
    }
    else
    {
      characterWindow.show ();
    }
    
    return true;
  }
  
  /**
   * toggle opening of the inventory window
   * 
   * @return whether the input event was used up
   */
  public boolean openInventory ()
  {
    Element inventoryWindow = getNifty ().getCurrentScreen ()
            .findNiftyControl ("window_inventory", Window.class).getElement ();
    
    
    if (inventoryWindow.isVisible ())
    {
      inventoryWindow.hide ();
    }
    else
    {
      inventoryWindow.show ();
    }
    
    return true;
  }
  
  /**
   * Set the target in the HUD
   * @param target the target in the hud
   */
  public void setTarget (Entity target)
  {
    Element targetPanel;
    Label targetName;
    Element targetImage;
    NiftyImage targetNiftyImage;
    
    targetPanel = getNifty ().getCurrentScreen ().findElementByName ("target");
    
    if (null == target)
    {
      targetPanel.hide ();
    }
    else
    {
      targetPanel.show ();
      
      targetName = getNifty ().getCurrentScreen ()
            .findNiftyControl ("target_name", Label.class);
      targetImage = getNifty ().getCurrentScreen ().findElementByName 
            ("target_image");
      targetNiftyImage = getNifty ()
            .createImage (target.getBasicImage (), false);
      
      targetName.setText (target.getName ());
      targetImage.getRenderer (ImageRenderer.class).setImage (targetNiftyImage); 
    }
  }
}
