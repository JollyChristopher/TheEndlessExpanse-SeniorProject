package halemaster.ee.world.micro;

import com.google.common.util.concurrent.ThreadFactoryBuilder;
import halemaster.ee.Game;
import halemaster.ee.world.Area;
import halemaster.ee.world.Config;
import halemaster.ee.world.history.HistoryGenerator;
import halemaster.ee.world.history.event.EventHolder;
import halemaster.ee.world.history.event.EventIO;
import halemaster.ee.world.history.event.type.EventTypeHolder;
import halemaster.ee.world.terrain.tile.BiomeTile;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @name WorldHolder
 * 
 * @version 0.0.0
 * 
 * @date Jan 25, 2014
 */
public class WorldHolder implements Runnable
{
  public static final int THREAD_COUNT = 2;
  public static final String GENERATED_FILE = "/generated";
  public static final int TIME_INCREMENT = 2;
  public static final int[] MAX_EVENTS = {0,0,1,1,2,3};
  public static final long TIME_REQUIREMENT = 15 * 1000;
  public static final long SLEEP_TIME = 100;
  public static final Logger LOGGER = 
          Logger.getLogger (WorldHolder.class.getName ());
  
  private ConcurrentHashMap<String, Area> playerLocations = 
          new ConcurrentHashMap<String, Area>();
  private ConcurrentHashMap<Area, Area> generated =
          new ConcurrentHashMap<Area, Area>();
  private ConcurrentHashMap<Area, BiomeTile[][]> currentAreas =
          new ConcurrentHashMap<Area, BiomeTile[][]>();
  private EventHolder currentEvents;
  private EventTypeHolder possibleEvents;
  private List<GenerationSequence> currentGenerators =
          new ArrayList<GenerationSequence> ();
  private ExecutorService runners = Executors.newFixedThreadPool (THREAD_COUNT, 
          new ThreadFactoryBuilder().setNameFormat("TEE-generator-%d").build());
  private volatile boolean running = true;
  private Game game;

  public WorldHolder (Game game,
          EventTypeHolder types, EventHolder events)
  {
    this.possibleEvents = types;
    this.currentEvents = events;
    this.game = game;
  }
  
  public EventHolder getEvents ()
  {
    return this.currentEvents;
  }
  
  public void setPlayerLocation (String player, Area area)
  {
    if (null == area)
    {
      this.playerLocations.remove (player);
    }
    else
    {
      this.playerLocations.put (player, area);
    }
  }
  
  public void stop ()
  {
    this.running = false;
  }
  
  private void loadGenerated ()
  {
    try
    {
      BufferedReader reader = new BufferedReader (new FileReader (new File 
              (Game.HOME + Game.GAME_FOLDER + Game.WORLD_FOLDER +
            "/" + this.currentEvents.getWorldName () + GENERATED_FILE)));
      String line;
      Area area;
      int x, y;
      
      while (reader.ready ())
      {
        line = reader.readLine ();
        x = Integer.valueOf (line.split (" ")[0]);
        y = Integer.valueOf (line.split (" ")[1]);
        area = new Area (x, y);
        this.generated.put (area, area);
      }
      
      reader.close ();
    }
    catch (FileNotFoundException e)
    {
      LOGGER.log (Level.WARNING, "Could not find file", e);
    }
    catch (IOException e)
    {
      this.game.handleError ("IO Error", e);
      this.running = false;
    }
  }
  
  private void appendArea (Area area) throws IOException
  {
    PrintWriter writer = new PrintWriter (new BufferedWriter (new FileWriter 
            (Game.HOME + Game.GAME_FOLDER + Game.WORLD_FOLDER +
          "/" + this.currentEvents.getWorldName () + GENERATED_FILE, true)));
    String line;

    line = area.getX ()+ " " + area.getY ();
    writer.println (line);

    writer.close ();
  }
  
  private Area findGenerationLocation ()
  {
    Area area = null;
    Area temp, nextTemp;
    Queue<Area> next = new ArrayDeque<Area> ();
    Set<Area> unusable = new HashSet<Area> ();
    Set<Area> generating = new HashSet<Area> ();
    
    for (GenerationSequence seq : this.currentGenerators)
    {
      generating.add (seq.getHistory ().getLocation ());
    }
    
    for (Entry<String, Area> player : this.playerLocations.entrySet ())
    {
      next.add (player.getValue ());
    }
    
    while (null == area && !next.isEmpty ())
    {
      temp = next.poll ();
      
      if (this.generated.contains (temp) || generating.contains (temp))
      {
        unusable.add (temp);
        
        nextTemp = new Area (temp.getX (), temp.getY () + 1);
        if (!unusable.contains (nextTemp))
        {
          next.add (nextTemp);
        }
        nextTemp = new Area (temp.getX (), temp.getY () - 1);
        if (!unusable.contains (nextTemp))
        {
          next.add (nextTemp);
        }
        nextTemp = new Area (temp.getX () + 1, temp.getY ());
        if (!unusable.contains (nextTemp))
        {
          next.add (nextTemp);
        }
        nextTemp = new Area (temp.getX () - 1, temp.getY ());
        if (!unusable.contains (nextTemp))
        {
          next.add (nextTemp);
        }
      }
      else
      {
        area = temp;
      }
    }
    
    return area;
  }
  
  public void run ()
  {
    HistoryGenerator createdEvents;
    HistoryGenerator newEvents;
    Area area;
    Set<Area> loadLocations = new HashSet<Area> ();
    long passage = 0;
    long last = System.currentTimeMillis ();
    
    loadGenerated ();
    
    while (this.running)
    {
      // look for finished generators, remove them from the map, and then add
      // the areas from the generated map. Save events
      for (int i = 0; i < this.currentGenerators.size (); i++)
      {
        if (this.currentGenerators.get (i).isDone ())
        {
          createdEvents = this.currentGenerators.get (i).getHistory ();
          try
          {
            EventIO.saveEvents (createdEvents.getCreated (), 
                    this.currentEvents.getWorldName (),
                  createdEvents.getTop (), 
                  createdEvents.getBottom (), 
                  createdEvents.getLeft (), 
                  createdEvents.getRight ());
            area = new Area (createdEvents.getTop (), 
                    createdEvents.getLeft ());
            AreaGenerator.saveTiles (this.currentGenerators.get (i).getArea (), 
                    area, this.currentEvents.getWorldName ());
            appendArea (area);
            this.generated.put (area, area);
          }
          catch (IOException e)
          {
            LOGGER.log (Level.WARNING, "Could not save events", e);
          }
          this.currentGenerators.remove (i);
          i--;
        }
      }
      
      // look for areas that need to be loaded and load them, causing us to
      // generate if need be
      for (Entry<String, Area> player : this.playerLocations.entrySet ())
      {
        area = new Area (player.getValue ().getX () - 1, player.getValue ().getY () - 1);
        loadLocations.add (area);
        area = new Area (player.getValue ().getX () - 1, player.getValue ().getY ());
        loadLocations.add (area);
        area = new Area (player.getValue ().getX () - 1, player.getValue ().getY () + 1);
        loadLocations.add (area);
        area = new Area (player.getValue ().getX (), player.getValue ().getY () - 1);
        loadLocations.add (area);
        area = new Area (player.getValue ().getX (), player.getValue ().getY ());
        loadLocations.add (area);
        area = new Area (player.getValue ().getX (), player.getValue ().getY () + 1);
        loadLocations.add (area);
        area = new Area (player.getValue ().getX () + 1, player.getValue ().getY () - 1);
        loadLocations.add (area);
        area = new Area (player.getValue ().getX () + 1, player.getValue ().getY ());
        loadLocations.add (area);
        area = new Area (player.getValue ().getX () + 1, player.getValue ().getY () + 1);
        loadLocations.add (area);
      }
      
      // load those in set if not already loaded
      for (Area load : loadLocations)
      {
        if (!this.currentEvents.hasEventsAt (load))
        {
          try
          {
            EventIO.getEvents (this.currentEvents.getWorldName (), 
                  this.currentEvents, load.getX (), load.getX (), 
                  load.getY (), load.getY ());
            this.currentAreas.put (load, AreaGenerator.loadTiles (load, 
                    this.currentEvents.getWorldName ()));
          }
          catch (IOException e)
          {
            LOGGER.log (Level.WARNING, "Could not load events", e);
          }
          catch (InstantiationException e)
          {
            LOGGER.log (Level.WARNING, "Could not load events", e);
          }
          catch (IllegalAccessException e)
          {
            LOGGER.log (Level.WARNING, "Could not load events", e);
          }
          
          boolean alreadyGenerating = false;
          
          for (GenerationSequence seq : this.currentGenerators)
          {
            if (seq.getHistory ().getLocation ().equals (load))
            {
              alreadyGenerating = true;
            }
          }
          
          if (!this.generated.contains (load) && !alreadyGenerating)
          {
            try
            {
              newEvents = new HistoryGenerator ();
              newEvents.setBasis (this.currentEvents);
              newEvents.setTypes (this.possibleEvents);
              newEvents.setIncrement (TIME_INCREMENT);
              newEvents.setGrouping (MAX_EVENTS);
              newEvents.setUntil (Integer.valueOf (Config.getValue 
                      (this.currentEvents.getWorldName (), "time")));
              newEvents.setTop (load.getX ());
              newEvents.setBottom (load.getX ());
              newEvents.setLeft (load.getX ());
              newEvents.setRight (load.getX ());
              newEvents.setLocation (load);
              long seed = Long.valueOf (Config.getValue 
                      (this.currentEvents.getWorldName (), "seed")) + 
                      load.getX () + load.getY () *
                      this.currentEvents.getWorldSize ();
              newEvents.setRandom (new Random (seed));
              for (EventTypeHolder ref : this.currentEvents.getTypeHolders ())
              {
                newEvents.addReference (ref);
              }
              GenerationSequence sequence = new GenerationSequence (newEvents);
              this.currentGenerators.add (sequence);
              this.runners.execute (sequence);
            }
            catch (IOException e)
            {
              LOGGER.log (Level.WARNING, "Could not generate area", e);
            }
          }
        }
      }
      
      // look for areas that need to be unloaded and unload them
      for (Area unload : this.currentEvents.getLoaded ())
      {
        if (!loadLocations.contains (unload))
        {
          // unload the area
          this.currentEvents.removeEvents (0, Integer.MAX_VALUE, unload.getX (),
                  unload.getX (), unload.getY (), unload.getY ());
          this.currentAreas.remove (unload);
        }
      }
      
      // add one new generate near a player (but outside of the currently
      // generating) to the runner
      if (passage >= TIME_REQUIREMENT)
      {
        Area newLoc = findGenerationLocation ();
        if (null != newLoc)
        {
          try
          {
            newEvents = new HistoryGenerator ();
            newEvents.setBasis (this.currentEvents);
            newEvents.setTypes (this.possibleEvents);
            newEvents.setIncrement (TIME_INCREMENT);
            newEvents.setGrouping (MAX_EVENTS);
            newEvents.setUntil (Integer.valueOf (Config.getValue 
                    (this.currentEvents.getWorldName (), "time")));
            newEvents.setTop (newLoc.getY ());
            newEvents.setBottom (newLoc.getY ());
            newEvents.setLeft (newLoc.getX ());
            newEvents.setRight (newLoc.getX ());
            newEvents.setLocation (newLoc);
            long seed = Long.valueOf (Config.getValue 
                    (this.currentEvents.getWorldName (), "seed")) + 
                    newLoc.getX () + newLoc.getY () *
                    this.currentEvents.getWorldSize ();
            newEvents.setRandom (new Random (seed));
            for (EventTypeHolder ref : this.currentEvents.getTypeHolders ())
            {
              newEvents.addReference (ref);
            }
            GenerationSequence sequence = new GenerationSequence (newEvents);
            this.currentGenerators.add (sequence);
            this.runners.execute (sequence);
          }
          catch (IOException e)
          {
            LOGGER.log (Level.WARNING, "Could not generate area", e);
          }
        }
        
        passage = 0;
      }
      
      passage += System.currentTimeMillis () - last;
      last = System.currentTimeMillis ();
      
      try
      {
        Thread.sleep (SLEEP_TIME);
      }
      catch (InterruptedException e)
      {
        LOGGER.log (Level.INFO, "Thread was interrupted", e);
      }
    }
    
    this.runners.shutdown ();
    try
    {
      this.runners.awaitTermination (10, TimeUnit.MINUTES);
    }
    catch (InterruptedException e)
    {
      LOGGER.log (Level.WARNING, "Runner was interrupted", e);
    }
    
    // save off remaining locations that needed generation
    for (int i = 0; i < this.currentGenerators.size (); i++)
    {
      if (this.currentGenerators.get (i).isDone ())
      {
        createdEvents = this.currentGenerators.get (i).getHistory ();
        try
        {
          EventIO.saveEvents (createdEvents.getCreated (), 
                  this.currentEvents.getWorldName (),
                createdEvents.getTop (), 
                createdEvents.getBottom (), 
                createdEvents.getLeft (), 
                createdEvents.getRight ());
          area = new Area (createdEvents.getTop (), 
                  createdEvents.getLeft ());
          AreaGenerator.saveTiles (this.currentGenerators.get (i).getArea (), 
                    area, this.currentEvents.getWorldName ());
          appendArea (area);
          this.generated.put (area, area);
        }
        catch (IOException e)
        {
          LOGGER.log (Level.WARNING, "Could not save events", e);
        }
        this.currentGenerators.remove (i);
        i--;
      }
    }
  }
}
