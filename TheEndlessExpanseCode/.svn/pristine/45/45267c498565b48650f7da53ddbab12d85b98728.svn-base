package halemaster.ee.state;

import com.jme3.app.Application;
import com.jme3.app.state.AbstractAppState;
import com.jme3.app.state.AppStateManager;
import com.jme3.collision.CollisionResult;
import com.jme3.collision.CollisionResults;
import com.jme3.input.MouseInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.AnalogListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.controls.MouseButtonTrigger;
import com.jme3.math.FastMath;
import com.jme3.math.Ray;
import com.jme3.math.Vector2f;
import com.jme3.math.Vector3f;
import com.jme3.scene.CameraNode;
import com.jme3.scene.control.CameraControl.ControlDirection;
import halemaster.ee.Game;
import halemaster.ee.Sprite;
import halemaster.ee.ai.MovementAI;
import halemaster.ee.world.Area;
import halemaster.ee.world.Biome;
import halemaster.ee.world.BiomeClassifier;
import halemaster.ee.world.Config;
import halemaster.ee.world.entity.Entity;
import halemaster.ee.world.entity.EntityType;
import halemaster.ee.world.history.event.EventHolder;
import halemaster.ee.world.history.event.EventIO;
import halemaster.ee.world.history.event.type.EventType;
import halemaster.ee.world.history.event.type.EventTypeHolder;
import halemaster.ee.world.macro.MacroTerrainGenerator;
import halemaster.ee.world.micro.AreaGenerator;
import halemaster.ee.world.micro.WorldHolder;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @name PlayerState
 * 
 * @version 0.0.0
 * 
 * @date Oct 16, 2013
 */
public class PlayerState extends AbstractAppState implements ActionListener, 
        AnalogListener 
{
  public enum PLAYER_IMAGE
  {
    KNIGHT_M ("knight", "m"),
    KNIGHT_F ("knight", "f"),
    PRIEST_M ("priest", "m"),
    PRIEST_F ("priest", "f"),
    ROGUE_M ("rogue", "m"),
    ROGUE_F ("rogue", "f"),
    ARCHER_M ("archer", "m"),
    ARCHER_F ("archer", "f"),
    MAGE_M ("mage", "m"),
    MAGE_F ("mage", "f");
    
    private Map<String, String[]> images;
    
    private PLAYER_IMAGE (String images, String gender)
    {
      String[] im;
      this.images = new HashMap<String,String[]>();
      im = new String[]{"Textures/entities/" + images + "/" + images + "_" + 
              gender + "_" + Entity.CHANNEL_LEFT + "_1.png","Textures/entities/"
              + images + "/" + images + "_" + gender + "_" + Entity.CHANNEL_LEFT
              + "_2.png"};
      this.images.put (Entity.CHANNEL_LEFT, im);
      im = new String[]{"Textures/entities/" + images + "/" + images + "_" + 
              gender + "_" + Entity.CHANNEL_RIGHT + 
              "_1.png","Textures/entities/" + images + "/" + images + "_" + 
              gender + "_" + Entity.CHANNEL_RIGHT + "_2.png"};
      this.images.put (Entity.CHANNEL_RIGHT, im);
    }
    
    public Map<String, String[]> getImages ()
    {
      return this.images;
    }
  }
  
  public static final Logger LOGGER = Logger.getLogger 
          (PlayerState.class.getName ());
  public static final String CLICK_NAME = "Player_SelectSpace";
  public static final String AREA = "/worlds";
  public static final String PLAYER_IMAGE_FILE = "image";
  public static final float PLAYER_SPEED = 0.75f;
  public static final String LOCATION_FOLDER = "/areas";
  public static final String FORWARD = "Player_forward_key";
  public static final String BACKWARD = "Player_back_key";
  public static final String LEFT = "Player_left_key";
  public static final String RIGHT = "Player_right_key";
  public static final String EVENT_SPLITTER = "\t";
  public static final float STEP_SIZE = AreaGenerator.TILE_HEIGHT;
  public static final float FORWARD_MOVE = -0.5f;
  public static final float BACK_MOVE = 1.5f;
  public static final float ADJUSTMENT = 0.25f;
  private static final float HOLD_AMOUNT = 0.25f;
  private static final float CAMERA_DISTANCE = 12f * Sprite.DEFAULT_SIZE;
  private static final float PIXEL_RATIO = 3.75f;
  
  private Game game;
  private CameraNode playerCam;
  private float held = 0f;
  private String worldName; // this and player name are used to load game.
  private String playerName;
  private WorldHolder world;
  private Entity player; 
  private int playerX = Area.ANYWHERE.getX ();
  private int playerY = Area.ANYWHERE.getY ();
  private int playerSubX = 0;
  private int playerSubY = 0;
  private boolean clickMove = false;
  private boolean canInterrupt = false;
  private String playerImage = null;
  private Hud hud;
  
  public PlayerState (String worldName, String playerName)
  {
    this.worldName = worldName;
    this.playerName = playerName;
  }
  
  /**
   * initialize this AppState.
   * 
   * @param manager State Manager that this is being attached to.
   * @param app Application that this is being attached to.
   */
  @Override
  public void initialize (AppStateManager manager, Application app)
  {
    EventTypeHolder types;
    EventHolder events;
    Biome[][] biomes;
    EventType[] typeArr;
    File overTypeFolder = 
            new File (EventIO.EVENT_FOLDER + EventIO.GLOBAL_FOLDER);
    File typeFolder = new File (EventIO.EVENT_FOLDER + EventIO.LOCAL_FOLDER);
    String spawnArea;
    
    this.game = (Game) app;
    
    this.game.getInputManager ().addMapping (CLICK_NAME, 
              new MouseButtonTrigger (MouseInput.BUTTON_LEFT));
        this.game.getInputManager ().addListener (this, CLICK_NAME);
    setClickToMove (this.game.getSettings ().getBoolean (CLICK_NAME));
    setKeys (true);
    
    try
    {
      types = new EventTypeHolder ();
      
      for (File typeLocation : typeFolder.listFiles ())
      {
        typeArr = EventIO.getTypes (typeLocation);
        for (EventType type : typeArr)
        {
          types.addType (type);
        }
      }
      
      for (File overTypeLocation : overTypeFolder.listFiles ())
      {
        typeArr = EventIO.getTypes (overTypeLocation);
        for (EventType type : typeArr)
        {
          types.addType (type);
        }
      }
      
      biomes = loadBiomes ();
      events = new EventHolder (this.worldName, biomes);
      events = EventIO.getEvents (worldName, events, Area.ANYWHERE.getX (), 
              Area.ANYWHERE.getX (), Area.ANYWHERE.getY (), 
              Area.ANYWHERE.getY (), types);
      
      types = new EventTypeHolder ();
      
      for (File typeLocation : typeFolder.listFiles ())
      {
        typeArr = EventIO.getTypes (typeLocation);
        for (EventType type : typeArr)
        {
          types.addType (type);
        }
      }
      
      spawnArea = Config.getValue (this.worldName,
              MacroTerrainGenerator.SPAWN_POINT);
      loadPlayer ();
      if (Area.ANYWHERE.getX () == this.playerX ||
              Area.ANYWHERE.getY () == this.playerY)
      {
        this.playerX = Integer.valueOf (spawnArea.split (",")[0]);
        this.playerY = Integer.valueOf (spawnArea.split (",")[1]);
      }
      this.world = new WorldHolder (this, types, events);
      
      this.player = new Entity ();
      Map<String, String[]> images = new HashMap<String, String[]>();
      for (Entry<String, String[]> image : PLAYER_IMAGE.valueOf 
              (this.playerImage).getImages ().entrySet ())
      {
        images.put (image.getKey (), image.getValue ());
      }
      this.player.setImages (images);      
      this.player.setAnimation (Entity.CHANNEL_LEFT);
      this.player.setLocation (new Area (this.playerX, this.playerY));
      this.player.setName (this.playerName);
      this.player.setSpeed (PLAYER_SPEED);
      this.player.setType (EntityType.PLAYER.getId ());
      this.player.setX (this.playerSubX);
      this.player.setY (this.playerSubY);
      this.player.addAI (Game.MOVEMENT_AI);
      
      this.world.setPlayerLocation (this.playerName, new Area (this.playerX,
              this.playerY));
      this.world.getEntityManager ().addEntity (this.player);
      this.game.updateSprites ();

      this.playerCam = new CameraNode("Player Camera", this.game.getCamera ());
      this.playerCam.setControlDir(ControlDirection.SpatialToCamera);
      this.game.getRootNode ().attachChild (this.playerCam);
      this.playerCam.setLocalTranslation(new Vector3f(
              this.player.getAbsoluteLocation ().x, CAMERA_DISTANCE, 
              this.player.getAbsoluteLocation ().y));
      this.playerCam.lookAt(this.player.getSprite ().getImage ()
              .getLocalTranslation(), Vector3f.UNIT_Y);
      this.playerCam.rotate (0, 0, FastMath.PI);
      
      Thread worldThread = new Thread (this.world);
      worldThread.setName ("TEE-world");
      worldThread.setPriority (Thread.MIN_PRIORITY);
      worldThread.start ();
    }
    catch (IOException e)
    {
      this.game.handleError ("Failure to load events", e);
    }
    catch (InstantiationException e)
    {
      this.game.handleError ("Failure to load events", e);
    }
    catch (IllegalAccessException e)
    {
      this.game.handleError ("Failure to load events", e);
    }
    
    super.initialize (manager, app);
  }

  public Hud getHud ()
  {
    return hud;
  }

  public void setHud (Hud hud)
  {
    this.hud = hud;
  }
  
  /**
   * Load the biomes of all the world
   * @return biome array
   */
  private Biome[][] loadBiomes ()
  {
    File biomeFile = new File (Game.HOME + Game.GAME_FOLDER + Game.WORLD_FOLDER
            + "/" + this.worldName + "/" + MacroTerrainGenerator.TERRAIN_FILE);
    int size;
    Biome[][] biomes = null;
    BufferedReader reader;
    
    try
    {
      size = Integer.valueOf (Config.getValue (this.worldName, 
            MacroTerrainGenerator.SIZE_KEY));
      biomes = new Biome[size][size];
      reader = new BufferedReader (new FileReader (biomeFile));
      
      for (int i = 0; i < biomes.length; i++)
      {
        for (int j = 0; j < biomes[i].length; j++)
        {
          biomes[i][j] = BiomeClassifier.getBiome ((byte) reader.read());
        }
      }
      
      reader.close ();
    }
    catch (IOException e)
    {
      LOGGER.log (Level.SEVERE, "Could not load biomes!", e);
    }
    
    return biomes;
  }
  
  /**
   * cleanup this AppState.
   */
  @Override
  public void cleanup ()
  {
    savePlayer ();
    this.world.getEntityManager ().removeEntity (this.player);
    this.game.getRootNode ().detachChild (this.playerCam);
    this.game.getInputManager ().removeListener (this);
    
    this.game.getInputManager ().deleteMapping (CLICK_NAME);
    
    this.playerCam = null;
    this.world.stop ();
    
    super.cleanup ();
  }
  
  public void loadPlayer ()
  {
    File worldFile = new File (Game.HOME + Game.GAME_FOLDER + 
            Game.PLAYER_FOLDER + "/" + this.playerName + AREA + "/" +
            this.worldName);
    File file = new File (Game.HOME + Game.GAME_FOLDER + Game.PLAYER_FOLDER + 
            "/" + this.playerName + "/" + PLAYER_IMAGE_FILE);
    BufferedReader reader;
    String location;
    
    try
    {
      reader = new BufferedReader (new FileReader (worldFile));
      
      location = reader.readLine ();
      
      if (null != location)
      {
        this.playerX = Integer.valueOf (location.split (",")[0]);
        this.playerY = Integer.valueOf (location.split (",")[1]);
      }
      
      location = reader.readLine ();
      
      if (null != location)
      {
        this.playerSubX = Integer.valueOf (location.split (",")[0]);
        this.playerSubY = Integer.valueOf (location.split (",")[1]);
      }
      
      reader.close ();
    }
    catch (IOException e)
    {
      LOGGER.log (Level.SEVERE, "Could not save player", e);
    }
    
    try
    {
      reader = new BufferedReader (new FileReader (file));
      
      this.playerImage = reader.readLine ();
      
      reader.close ();
    }
    catch (IOException e)
    {
      LOGGER.log (Level.SEVERE, "Could not save player", e);
    }
  }
  
  public void savePlayer ()
  {
    File worldFile = new File (Game.HOME + Game.GAME_FOLDER +
            Game.PLAYER_FOLDER + "/" + this.playerName + AREA + "/" + 
            this.worldName);
    BufferedWriter writer;
    
    try
    {
      File folder = new File (Game.HOME + Game.GAME_FOLDER + Game.PLAYER_FOLDER 
              + "/" + this.playerName + AREA);
      folder.mkdir ();
      worldFile.createNewFile ();
      writer = new BufferedWriter (new FileWriter (worldFile));
      
      writer.write (this.player.getLocation ().toString () + "\n");
      writer.write (this.player.getX () + "," + this.player.getY ());
      
      writer.close ();
    }
    catch (IOException e)
    {
      LOGGER.log (Level.SEVERE, "Could not save player", e);
    }
  }
  
  /**
   * Set the movement keys to on or off.
   * 
   * @param on whether to turn keys on or off.
   */
  public void setKeys (boolean on)
  {
    try
    {
      if (on)
      {
        this.game.getInputManager ().addMapping (FORWARD, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (FORWARD).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, FORWARD);
        this.game.getInputManager ().addMapping (BACKWARD, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (BACKWARD).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, BACKWARD);
        this.game.getInputManager ().addMapping (LEFT, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (LEFT).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, LEFT);
        this.game.getInputManager ().addMapping (RIGHT, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (RIGHT).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, RIGHT);
      }
      else
      {
        this.game.getInputManager ().deleteMapping (FORWARD);
        this.game.getInputManager ().deleteMapping (BACKWARD);
        this.game.getInputManager ().deleteMapping (LEFT);
        this.game.getInputManager ().deleteMapping (RIGHT);
      }
    }
    catch (NullPointerException exception)
    {
      LOGGER.log (Level.FINE, "Tried to delete Non-existant", exception);
    }
  }
  
  public void setClickToMove (boolean move)
  {
    this.clickMove = move;
  }
  
  /**
   * Pause/unpause this State.
   * 
   * @param enable whether to enable this state.
   */
  @Override
  public void setEnabled (boolean enable)
  {
    this.playerCam.setEnabled (enable);
    
    super.setEnabled (enable);
  }
  
  /**
   * update anything that is controlled by this state.
   * 
   * @param tpf the delta since the previous call to update.
   */
  @Override
  public void update (float tpf)
  {
    this.world.getEntityManager ().update (tpf);
    if (isEnabled ())
    {
      int prevX = this.playerX;
      int prevY = this.playerY;

      if (this.player.getAbsoluteLocation ().x > 
              (this.playerX + 1) * AreaGenerator.AREA_SIZE * 
              AreaGenerator.TILE_WIDTH)
      {
        this.playerX++;
      }
      if (this.player.getAbsoluteLocation ().y > 
              (this.playerY + 1) * AreaGenerator.AREA_SIZE * 
              AreaGenerator.TILE_HEIGHT)
      {
        this.playerY++;
      }
      if (this.player.getAbsoluteLocation ().x < 
              (this.playerX) * AreaGenerator.AREA_SIZE * 
              AreaGenerator.TILE_WIDTH)
      {
        this.playerX--;
      }
      if (this.player.getAbsoluteLocation ().y < 
              (this.playerY) * AreaGenerator.AREA_SIZE * 
              AreaGenerator.TILE_HEIGHT)
      {
        this.playerY--;
      }

      if (prevX != this.playerX || prevY != this.playerY)
      {
        this.world.setPlayerLocation (this.playerName, 
                new Area (this.playerX, this.playerY));
      }
      this.playerCam.setLocalTranslation (
              this.player.getAbsoluteLocation ().x, 
              this.playerCam.getLocalTranslation ().y, 
              this.player.getAbsoluteLocation ().y);
    }
    
    super.update (tpf);
  }
  
  /**
   * Called when an analog action that is registered with this state happens.
   * 
   * @param action name of action called.
   * @param strength strength of the input signal, or tpf for boolean triggers.
   * @param tpf the time since the last call of this action.
   */
  public void onAnalog (String action, float strength, float tpf)
  {
    MovementAI move;
    Vector2f moveLoc;
    
    if (isEnabled ())
    {
      move = (MovementAI) this.player.getAI (Game.MOVEMENT_AI);
      if (CLICK_NAME.equals (action))
      {
        this.held += tpf;
      }
      else if (FORWARD.equals (action))
      {
        if (null == move.getMoveTo () || this.canInterrupt)
        {
          moveLoc = (this.player.getAbsoluteLocation ().clone ());
          moveLoc.x += (ADJUSTMENT);
          moveLoc.y += (STEP_SIZE * FORWARD_MOVE);
          move.setMoveTo (moveLoc);
          this.canInterrupt = false;
        }
      }
      else if (BACKWARD.equals (action))
      {
        if (null == move.getMoveTo () || this.canInterrupt)
        {
          moveLoc = (this.player.getAbsoluteLocation ().clone ());
          moveLoc.x += (ADJUSTMENT);
          moveLoc.y += (STEP_SIZE * BACK_MOVE);
          move.setMoveTo (moveLoc);
          this.canInterrupt = false;
        }
      }
      else if (LEFT.equals (action))
      {
        if (null == move.getMoveTo () || this.canInterrupt)
        {
          moveLoc = (this.player.getAbsoluteLocation ().clone ());
          moveLoc.y += (ADJUSTMENT);
          moveLoc.x += (STEP_SIZE * FORWARD_MOVE);
          move.setMoveTo (moveLoc);
          this.canInterrupt = false;
        }
      }
      else if (RIGHT.equals (action))
      {
        if (null == move.getMoveTo () || this.canInterrupt)
        {
          moveLoc = (this.player.getAbsoluteLocation ().clone ());
          moveLoc.y += (ADJUSTMENT);
          moveLoc.x += (STEP_SIZE * BACK_MOVE);
          move.setMoveTo (moveLoc);
          this.canInterrupt = false;
        }
      }
    }
  }
  /**
   * Called when a boolean action that is registered with this state happens.
   * 
   * @param action name of action called.
   * @param clicked false if the action is ongoing.
   * @param tpf the time since the last call of this action.
   */
  public void onAction (String action, boolean clicked, float tpf)
  {
    CollisionResults results;
    CollisionResult closest;
    Ray ray;
    Vector3f contact;
    Vector2f moveLoc;
    MovementAI move;
    float pixelsPer;
    float mouseX, mouseY;
    float width, height;
    float clickX, clickY;
    
    if (isEnabled ())
    {
      move = (MovementAI) this.player.getAI (Game.MOVEMENT_AI);
      if (CLICK_NAME.equals (action) && !clicked)
      {
        if (this.held < HOLD_AMOUNT)
        {
          results = new CollisionResults ();
          /*
           * This ray is using where the player clicked on screen in order to find
           * a location on the terrain to use. This is quite useful for us.
           */
          ray = new Ray (this.game.getCamera ().getWorldCoordinates 
                  (this.game.getInputManager ().getCursorPosition (), 0.05f), 
                  this.game.getCamera ().getWorldCoordinates 
                  (this.game.getInputManager ().getCursorPosition (), 0.5f)
                  .subtractLocal (this.game.getCamera ().getWorldCoordinates 
                  (this.game.getInputManager ().getCursorPosition (), 0.05f))
                  .normalizeLocal ());
          this.game.getSpriteNode ().collideWith (ray, results);

          /*if (results.size () > 0 && this.clickMove)
          {
            closest = results.getClosestCollision ();
            contact = closest.getGeometry ().getLocalTranslation ();
            moveLoc = new Vector2f (contact.x, 
                    contact.z);
            move.setMoveTo (moveLoc);
            this.canInterrupt = true;
          }*/
          
          pixelsPer = CAMERA_DISTANCE / PIXEL_RATIO;
          mouseX = this.game.getInputManager ().getCursorPosition ().x;
          mouseY = this.game.getInputManager ().getCursorPosition ().y;
          width = this.game.getRenderManager ().getCurrentCamera ().getWidth ();
          height = this.game.getRenderManager ().getCurrentCamera ()
                  .getHeight ();
          
          clickX = this.player.getAbsoluteLocation ().x + ((int) ( 
                  (mouseX - width / 2) / pixelsPer) + 0.5f) * 
                  AreaGenerator.TILE_WIDTH;
          clickY = this.player.getAbsoluteLocation ().y + ((int) ( 
                  (mouseY - height / 2) / pixelsPer) + 0.5f) * 
                  AreaGenerator.TILE_HEIGHT;
          
          if (this.clickMove)
          {
            moveLoc = new Vector2f (clickX, clickY);
            move.setMoveTo (moveLoc);
            this.canInterrupt = true;
          }
          
          Entity clickedEntity = null;
          for (int i = 0; null == clickedEntity && i < results.size (); i++)
          {
            closest = results.getCollision (i);
            if (null != closest.getGeometry ().getUserData (Sprite.ENTITY_MARK))
            {
              List<Entity> possibles = this.world.getEntityManager ()
                      .getEntities (this.playerX, this.playerY);
              for (int x = 0; null == clickedEntity && x < possibles.size ();
                      x++)
              {
                if (closest.getGeometry ().getUserData (Sprite.ENTITY_MARK)
                        .equals (possibles.get (x).getName ()))
                {
                  clickedEntity = possibles.get (x);
                }
              }
            }
          }
          
          if (null != clickedEntity)
          {
            this.hud.setTarget (clickedEntity);
          }
        }

        this.held = 0f;
      }
    }
  }

  public Game getGame ()
  {
    return game;
  }

  public WorldHolder getWorld ()
  {
    return world;
  }
  
  public String getPlayerName ()
  {
    return this.playerName;
  }
  
  public String getPlayerImage ()
  {
    return this.player.getBasicImage ();
  }
}
