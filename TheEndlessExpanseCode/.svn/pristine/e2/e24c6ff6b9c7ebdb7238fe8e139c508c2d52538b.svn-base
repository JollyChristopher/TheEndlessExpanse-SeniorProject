package halemaster.ee.world.history;

import halemaster.ee.world.Area;
import halemaster.ee.world.history.event.Event;
import halemaster.ee.world.history.event.EventHolder;
import halemaster.ee.world.history.event.EventSet;
import halemaster.ee.world.history.event.type.EventMapper;
import halemaster.ee.world.history.event.type.EventTypeHolder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @name HistoryGenerator
 * 
 * @version 0.0.0
 * 
 * @date Nov 19, 2013
 */
public class HistoryGenerator 
{
  private static final Logger LOGGER = Logger.getLogger 
          (HistoryGenerator.class.getName ());
  private EventTypeHolder types;
  private List<EventTypeHolder> reference = new ArrayList<EventTypeHolder>();
  
  /**
   * Generate events with the given parameters.
   * 
   * @param increment how much to increment for each spawn loop.
   * @param until when to stop generating events. Any caused after this are
   *              removed 
   * @param grouping max number of events to spawn at any particular date.
   * @param top The top part we are concerned with in the map.
   * @param bottom The bottom part we are concerned with in the map.
   * @param left The left part we are concerned with in the map.
   * @param right The right part we are concerned with in the map.
   * @param random the random object to use.
   * @param location the location to generate at.
   * @return the event holder generated into.
   */
  public EventHolder generate (int increment, int until, int[] grouping, int top,
          int bottom, int left, int right, Random random, Area location, 
          final EventHolder basis)
  {
    Event[] tempEvents;
    Event[] spawnEvents;
    Event[] basisEvents;
    EventMapper mapper;
    EventMapper[] tempMappers;
    EventHolder creation = new EventHolder (basis.getWorldName (), 
            basis.getWorld ());
    EventSet mapperSet;
    
    creation.addTypeHolder (this.types);
    for (EventTypeHolder ref : this.reference)
    {
      creation.addTypeHolder (ref);
    }
    
    for (int currentTime = 0; currentTime <= until; currentTime += increment)
    {
      tempEvents = creation.getEvents (currentTime - increment + 1, currentTime, 
              left, right, top, bottom);
      
      for (Event temp : tempEvents)
      {
        if (!temp.isSettled ())
        {
          if (temp.getLock ())
          {
            creation.removeEvent (temp);
          }
          else
          {
            creation.lockFromEvent (temp);
            // create causes
            for (String causeId : temp.getType ().getCausesIds ())
            {
              for (Map.Entry<String, String> chances : 
                      temp.getType ().getCauses (causeId).entrySet ())
              {
                try
                {
                  if (random.nextInt (100) <
                          Integer.valueOf (chances.getKey ().split ("%")[0]))
                  {
                    try
                    {
                      mapper = new EventMapper ();
                      mapper.setType (creation.getType (causeId));
                      mapper.addParent (temp);
                      String[] timeRange = chances.getValue ().split("-");
                      mapper.createEvent (creation, random, temp.getDate ()
                              + (random.nextInt 
                              (Integer.valueOf (timeRange[1]) - 
                              Integer.valueOf(timeRange[0]) + 1) + 
                              Integer.valueOf(timeRange[0])), 
                              temp.getLocation (), false);
                    }
                    catch (InstantiationException e)
                    {
                      LOGGER.log (Level.WARNING, "Failed to create an event", 
                              e);
                    }
                    catch (IllegalAccessException e)
                    {
                      LOGGER.log (Level.WARNING, "Failed to create an event",
                              e);
                    }
                    catch (IllegalArgumentException e)
                    {
                      LOGGER.log (Level.SEVERE, 
                              "No new events could be created!", e);
                    }
                  }
                }
                catch (NumberFormatException ex)
                {
                  LOGGER.log (Level.SEVERE, 
                              "Number misformat", ex);
                }
              }
            }
          }
          temp.setSettled (true);
        }
      }
      for (int eventCount = grouping[random.nextInt (grouping.length)]; 
              eventCount > 0; eventCount--)
      {
        basisEvents = basis.getEvents (0, currentTime, 
             left, right, top, bottom, false);
        spawnEvents = creation.getEvents (0, currentTime, 
                left, right, top, bottom, false);
        tempEvents = new Event[basisEvents.length + spawnEvents.length];
        System.arraycopy (basisEvents, 0, tempEvents, 0, basisEvents.length);
        System.arraycopy (spawnEvents, 0, tempEvents, basisEvents.length,
                spawnEvents.length);
        tempMappers = this.types.generateMappers (tempEvents);
        mapperSet = new EventSet ();
        for (EventMapper temp : tempMappers)
        {
          mapperSet.add (temp);
        }
        try
        {
          mapperSet.getMapper (random).createEvent 
                  (creation, random, currentTime, location, true);
        }
        catch (InstantiationException e)
        {
          LOGGER.log (Level.WARNING, "Failed to create an event", e);
        }
        catch (IllegalAccessException e)
        {
          LOGGER.log (Level.WARNING, "Failed to create an event", e);
        }
        catch (IllegalArgumentException e)
        {
          LOGGER.log (Level.SEVERE, "No new events could be created!", e);
        }
      }
    }
    
    tempEvents = creation.getEvents (until + 1, Integer.MAX_VALUE, 
              left, right, top, bottom);
      
    for (Event temp : tempEvents)
    {
      creation.removeEvent (temp);
    }
    
    return creation;
  }

  public EventTypeHolder getTypes ()
  {
    return types;
  }

  public void setTypes (EventTypeHolder types)
  {
    this.types = types;
  }

  public EventTypeHolder[] getReferences ()
  {
    EventTypeHolder[] refs = new EventTypeHolder[0];
    refs = this.reference.toArray (refs);
    return refs;
  }

  public void addReference (EventTypeHolder reference)
  {
    this.reference.add (reference);
  }
}
