package halemaster.ee.world.faction;

import halemaster.ee.Game;
import halemaster.ee.Json;
import halemaster.ee.state.Menu;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * @name Faction
 * 
 * @version 0.0.0
 * 
 * @date Nov 9, 2013
 */
public class Faction 
{
  public static final String FACTION_FOLDER = "/factions";
  private static Map<String, FactionHandler> factions =
          new HashMap<String, FactionHandler> ();
  private String name;
  private Map<String, Integer> relations = new HashMap<String, Integer> ();
  private Set<Settlement> settlements = new HashSet<Settlement> ();
  
  public Faction (String name)
  {
    this.name = name;
  }
  
  /**
   * Change the diplomacy of this faction with another faction.
   * 
   * @param faction the faction to change diplomacy with.
   * @param diplomacy the diplomacy of the faction.
   */
  public void changeDiplomacy (Faction faction, int diplomacy)
  {
    this.relations.put (faction.getName (), diplomacy);
    DiplomaticGroup group = faction.getDiplomacy (this);
    DiplomaticGroup myGroup = getDiplomacy (faction);
    if (null == group)
    {
      faction.changeDiplomacy (this, diplomacy);
    }
    else if (group != myGroup)
    {
      faction.changeDiplomacy (this, (group.getLow () >= myGroup.getHigh ())
              ? (myGroup.getHigh ()) : (myGroup.getLow ()));
    }
  }
  
  /**
   * Get the diplomacy of this faction with another faction.
   * 
   * @param faction the faction to get the diplomacy of.
   * @return the diplomacy between this faction and the other.
   */
  public DiplomaticGroup getDiplomacy (Faction faction)
  {
    Integer value = this.relations.get (faction.getName ());
    if (null == value)
    {
      return null;
    }
    return DiplomaticGroup.getGroup (value);
  }
  
  public String getName ()
  {
    return this.name;
  }
  
  /**
   * Create a new settlement with the parameters for this Faction.
   * 
   * @param x x value of first area.
   * @param y y value of first area.
   * @param size population of first area.
   * @param name name of the settlement.
   */
  public void addSettlement (int x, int y, int size, String name)
  {
    Settlement settlement = new Settlement (name, this);
    settlement.setPopulation (size);
    settlement.addArea (x, y);
    this.settlements.add (settlement);
  }
  
  /**
   * Get all settlements in this faction.
   * 
   * @return array of settlements in this faction.
   */
  public Settlement[] getSettlements ()
  {
    Settlement[] settlementArray = new Settlement[this.settlements.size ()];
    this.settlements.toArray (settlementArray);
    
    return settlementArray;
  }
  
  /**
   * Save this faction in the given world folder.
   * 
   * @param world name of the world to save in. 
   */
  public void saveFaction (String world) throws IOException
  {
    if (null == world)
    {
      throw new NullPointerException ("world");
    }
    new File (Game.HOME + Game.GAME_FOLDER + Game.WORLD_FOLDER + "/" + world + 
            FACTION_FOLDER).mkdirs ();
    Json.saveJson (new File (Game.HOME + Game.GAME_FOLDER + Game.WORLD_FOLDER
            + "/" + world + FACTION_FOLDER + "/" + getName ()), this);
  }
  
  /**
   * Load all factions for the given world into the handler.
   * 
   * @param world world name to load.
   * @param handler handler to load into.
   * @return array of factions from the handler.
   */
  public static Faction[] load (String world, FactionHandler handler)
          throws IOException
  {
    Faction[] loaded;
    ArrayList<Faction> factionList = new ArrayList<Faction> ();
    File worldFolder = new File (Game.HOME + Game.GAME_FOLDER + 
            Game.WORLD_FOLDER + "/" + world + FACTION_FOLDER);
    
    for (File file : worldFolder.listFiles ())
    {
      loaded = Json.getFromFile (file, Faction.class);
      factionList.addAll (Arrays.asList (loaded));
    }
    
    for (Faction faction : factionList)
    {
      handler.addFaction (faction);
    }
    
    return handler.getFactions ();
  }
  
  public static void save (String world, FactionHandler handler)
          throws IOException
  {
    Menu.emptyDirectory (new File (Game.HOME + Game.GAME_FOLDER + 
            Game.WORLD_FOLDER + "/" + world + FACTION_FOLDER));
    for (Faction faction : Faction.getFactions (world))
    {
      faction.saveFaction (world);
    }
  }
  
  public static void save (String world) throws IOException
  {
    if (factions.containsKey (world))
    {
      save (world, factions.get (world));
    }
  }
  
  /**
   * Load all factions from the given world into the main handler.
   * 
   * @param world world to load for.
   * @return array of factions from the main Handler after load.
   */
  public static Faction[] load (String world) throws IOException
  {
    if (!factions.containsKey (world))
    {
      factions.put (world, new FactionHandler ());
    }
    return load (world, factions.get (world));
  }
  
  /**
   * Add a new faction with the given name to the main faction handler.
   * 
   * @param name name of new faction.
   */
  public static void addFaction (String world, String name) throws IOException
  {
    if (!factions.containsKey (world))
    {
      load (world);
    }
    factions.get(world).addFaction (new Faction (name));
  }
  
  /**
   * get the faction with the given name from the main handler.
   * 
   * @param name name of faction.
   * @return faction of the given name.
   */
  public static Faction getFaction (String world, String name) 
          throws IOException
  {
    if (!factions.containsKey (world))
    {
      load (world);
    }
    return factions.get (world).getFaction (name);
  }
  
  /**
   * Get all factions from the main handler.
   * 
   * @return array of all factions from the main handler.
   */
  public static Faction[] getFactions (String world) throws IOException
  {
    if (!factions.containsKey (world))
    {
      load (world);
    }
    return factions.get(world).getFactions ();
  }
  
  public static void removeFaction (String world, String name) 
          throws IOException
  {
    if (!factions.containsKey (world))
    {
      load (world);
    }
    factions.get(world).remove (name);
  }
}
