package halemaster.ee.world.entity;

import com.jme3.math.Vector2f;
import com.jme3.math.Vector3f;
import halemaster.ee.Game;
import halemaster.ee.Sprite;
import halemaster.ee.world.Area;
import halemaster.ee.world.micro.AreaGenerator;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

/**
 * @name Entity
 * 
 * @version 0.0.0
 * 
 * @date Feb 11, 2014
 */
public class Entity 
{
  public static final int ENTITY_LAYER = 20;
  
  private transient Sprite sprite;
  private Map<String, String[]> images;
  private String currentAnimation = "";
  private float speed;
  private String name;
  private int x;
  private int y;
  private Area location;
  private String type;
  private Map<String, Object> data = new HashMap<String, Object>();
  
  /**
   * Initialize the Entity with sprite info
   * @param game game to initialize with
   */
  public void initialize (Game game)
  {
    this.sprite = new Sprite (this.name, game.getAssetManager (), this.speed, 
            ENTITY_LAYER);
    for (Entry<String, String[]> image : this.images.entrySet ())
    {
      this.sprite.addAnimation (image.getKey (), image.getValue ());
    }
    game.attachSprite (this.sprite);
    setAnimation (this.currentAnimation);
    move (this.location.getX () * AreaGenerator.AREA_SIZE + this.x, 
            this.location.getY () * AreaGenerator.AREA_SIZE + this.y);
  }
  
  /**
   * unload the entity in the game screen, effectively removing it from play.
   * @param game game to unload with
   */
  public void unload (Game game)
  {
    game.detachSprite (this.sprite);
  }
  
  /**
   * update the entity
   * @param tpf delta from previous update
   */
  public void update (float tpf)
  {
    this.sprite.update (tpf);
  }

  public Sprite getSprite ()
  {
    return sprite;
  }

  public Map<String, String[]> getImages ()
  {
    return images;
  }

  public void setImages (Map<String, String[]> images)
  {
    this.images = images;
  }

  public float getSpeed ()
  {
    return speed;
  }

  public void setSpeed (float speed)
  {
    this.speed = speed;
  }

  public String getName ()
  {
    return name;
  }

  public void setName (String name)
  {
    this.name = name;
  }

  public int getX ()
  {
    return x;
  }

  public void setX (int x)
  {
    this.x = x;
  }

  public int getY ()
  {
    return y;
  }

  public void setY (int y)
  {
    this.y = y;
  }

  public Area getLocation ()
  {
    return location;
  }

  public void setLocation (Area location)
  {
    this.location = location;
  }

  public String getType ()
  {
    return type;
  }

  public void setType (String type)
  {
    this.type = type;
  }
  
  public void setAnimation (String anim)
  {
    if (null != this.sprite)
    {
      this.sprite.setAnimation (anim);
    }
    this.currentAnimation = anim;
  }
  
  /**
   * Set the given data to the entity.
   * @param key key of the data
   * @param data data to add
   */
  public void setData (String key, Object data)
  {
    this.data.put (key, data);
  }
  
  /**
   * Get the data with the given key
   * @param key key of the data
   * @return data found at that key
   */
  public Object getData (String key)
  {
    return this.data.get (key);
  }
  
  /**
   * move the Entity to the given x, y coordinates
   * 
   * @param x x to move to
   * @param y y to move to
   */
  public void move (float x, float y)
  {
    moveAbsolute (x * AreaGenerator.TILE_WIDTH, y *
            AreaGenerator.TILE_HEIGHT);
  }
  
  /**
   * move the Entity to the given x, y coordinates
   * 
   * @param x x to move to
   * @param y y to move to
   */
  public void moveAbsolute (float x, float y)
  {
    this.sprite.move (x, y);
    if (x / AreaGenerator.TILE_WIDTH < this.location.getX ())
    {
      this.location = new Area (this.location.getX () - 1,
              this.location.getY ());
    }
    if (x / AreaGenerator.TILE_WIDTH > this.location.getX ())
    {
      this.location = new Area (this.location.getX () + 1,
              this.location.getY ());
    }
    if (y / AreaGenerator.TILE_HEIGHT < this.location.getY ())
    {
      this.location = new Area (this.location.getX (),
              this.location.getY () - 1);
    }
    if (y / AreaGenerator.TILE_HEIGHT > this.location.getY ())
    {
      this.location = new Area (this.location.getX (),
              this.location.getY () + 1);
    }
  }
  
  /**
   * Get the sprite location of the entity in game
   * @return x, y coordinates of the entity in game
   */
  public Vector2f getAbsoluteLocation ()
  {
    Vector2f loc = new Vector2f();
    Vector3f spriteLoc = this.sprite.getImage ().getLocalTranslation ();
    
    loc.x = spriteLoc.x;
    loc.y = spriteLoc.z;
    
    return loc;
  }
}
