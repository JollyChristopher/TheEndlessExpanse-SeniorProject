package halemaster.ee.localization;

import java.text.MessageFormat;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @name Localizer
 * 
 * @version 0.0.0
 * 
 * @date Oct 12, 2013
 */
public class Localizer
{
  public static final String DEFAULT_BUNDLE =
          "halemaster.ee.localization.Bundle";
  public static final Logger LOGGER = 
          Logger.getLogger(Localizer.class.getName ());
  private static final Localizer SINGLETON = new Localizer ();
  
  private Locale locale = Locale.getDefault ();
  
  /**
   * Get a localized string of the given key from the singleton.
   * 
   * @param key key of string to localize.
   */
  public static String getString (String key, Object...arguments)
  {
    return getString (DEFAULT_BUNDLE, key, arguments);
  }
  
  /**
   * Get a localized string of the given key from the singleton.
   * 
   * @param bundle bundle location to use.
   * @param key key of string to localize.
   */
  public static String getString (String bundle, String key, Object...arguments)
  {
    return SINGLETON.getStringFromKey (bundle, key, arguments);
  }
  
  /**
   * Change the language of the localizer singleton.
   * 
   * @param locale the language to change to.
   */
  public static void changeLanguage (Locale locale)
  {
    SINGLETON.setLocale (locale);
  }
  
  /**
   * Get a localized string based upon the given key.
   * 
   * @param bundle the bundle to find the string in.
   * @param key key of localized string.
   * @return the localized version of the string.
   */
  public String getStringFromKey (String bundle, String key, Object...arguments)
  {
    try
    {
      key = MessageFormat.format (ResourceBundle.getBundle (bundle, this.locale)
              .getString (key), arguments);
      LOGGER.log (Level.FINEST, "{0} localized", key);
    }
    catch (MissingResourceException e)
    {
      LOGGER.log (Level.WARNING, "Could not find a resource: ", e);
    }
      
    return key;
  }
  
  /**
   * Change the locale of this Localizer
   * 
   * @param locale what to change the locale to.
   */
  public void setLocale (Locale locale)
  {
    LOGGER.log (Level.FINEST, "Locale changed to {0}", locale.toString ());
    this.locale = locale;
  }
}
