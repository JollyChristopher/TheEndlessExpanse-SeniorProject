package halemaster.ee.world.entity;

import halemaster.ee.state.PlayerState;
import halemaster.ee.world.Area;
import halemaster.ee.world.Biome;
import halemaster.ee.world.BiomeClassifier;
import halemaster.ee.world.history.event.Event;
import halemaster.ee.world.history.event.EventHolder;
import halemaster.ee.world.micro.AreaGenerator;
import halemaster.ee.world.terrain.tile.BiomeTile;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * @name EntityGenerator
 * 
 * @version 0.0.0
 * 
 * @date Feb 11, 2014
 */
public class EntityGenerator 
{
  public static final String NPC_STRING = "npc.create";
  public static final int CAREER_SIZE = 3;
  public static final String NPC_CAREER = "job";
  public static final int MAX_MONSTERS = AreaGenerator.AREA_SIZE;
  
  /**
   * Generate all entities that would exist in the area.
   * @param events events for the world
   * @param location location to generate
   * @param tiles tiles in the location
   * @param random random to use to generate
   * @return array of entities, which can then be used for anything
   */
  public static Entity[] generate (EventHolder events, Area location, 
          BiomeTile[][] tiles, Random random)
  {
    Entity[] returnEntities;
    Entity temp;
    List<Entity> npcs = new ArrayList<Entity>();
    List<Monster> possibleMonsters;
    String npcType;
    String[] npcSplit;
    
    // add all npcs from events
    for (Event event : events.getEvents (0, Integer.MAX_VALUE, location.getX (), 
            location.getX (), location.getY (), location.getY (), false))
    {
      if (event.getType ().getId ().startsWith (NPC_STRING))
      {
        // is an npc that is not locked out
        npcSplit = event.getType ().getId ().split ("\\.");
        if (CAREER_SIZE > npcSplit.length)
        {
          npcType = "";
        }
        else
        {
          npcType = npcSplit[CAREER_SIZE - 1];
        }
        
        temp = new Entity ();
        temp.setLocation (location);
        temp.setData (NPC_CAREER, npcType);
        temp.setImages (new String[] {PlayerState.PLAYER_IMAGES[0]});
        temp.setName (event.getVariable ("npc").getPrint ());
        temp.setSpeed (0);
        temp.setType (EntityType.NPC.getId ());
        temp.setX (random.nextInt (AreaGenerator.AREA_SIZE));
        temp.setY (random.nextInt (AreaGenerator.AREA_SIZE));
        npcs.add (temp);
      }
    }
    
    // spawn monsters
    returnEntities = new Entity[npcs.size () + random.nextInt (MAX_MONSTERS)];
    possibleMonsters = Monster.getForBiome (BiomeClassifier.getBiome 
            (tiles[0][0].getBiomeId ()));
    
    for (int i = npcs.size (); i < returnEntities.length; i++)
    {
      Monster monster = possibleMonsters.get (random.nextInt 
              (possibleMonsters.size ()));
      temp = new Entity ();
      temp.setLocation (location);
      temp.setImages (monster.getImages ());
      temp.setName (monster.getName ());
      temp.setSpeed (monster.getSpeed ());
      temp.setType (EntityType.MONSTER.getId ());
      temp.setX (random.nextInt (AreaGenerator.AREA_SIZE));
      temp.setY (random.nextInt (AreaGenerator.AREA_SIZE));
      returnEntities[i] = temp;
    }
    
    return returnEntities;
  }
}
