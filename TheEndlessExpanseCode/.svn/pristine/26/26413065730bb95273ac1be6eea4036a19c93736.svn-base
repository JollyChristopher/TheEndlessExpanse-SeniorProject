package halemaster.ee.state;

import com.jme3.app.Application;
import com.jme3.app.state.AbstractAppState;
import com.jme3.app.state.AppStateManager;
import com.jme3.collision.CollisionResult;
import com.jme3.collision.CollisionResults;
import com.jme3.input.ChaseCamera;
import com.jme3.input.MouseInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.AnalogListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.controls.MouseButtonTrigger;
import com.jme3.light.DirectionalLight;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.math.Ray;
import com.jme3.math.Vector3f;
import com.jme3.scene.Geometry;
import com.jme3.scene.Spatial;
import com.jme3.scene.shape.Box;
import halemaster.ee.Game;
import halemaster.ee.world.Config;
import halemaster.ee.world.history.event.EventHolder;
import halemaster.ee.world.history.event.EventIO;
import halemaster.ee.world.history.event.type.EventType;
import halemaster.ee.world.history.event.type.EventTypeHolder;
import halemaster.ee.world.micro.WorldHolder;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @name PlayerState
 * 
 * @version 0.0.0
 * 
 * @date Oct 16, 2013
 */
public class PlayerState extends AbstractAppState implements ActionListener, 
        AnalogListener 
{
  public static final Logger LOGGER = Logger.getLogger 
          (PlayerState.class.getName ());
  public static final String CLICK_NAME = "Player_SelectSpace";
  public static final String PLAYER_MODEL = "Models/character/skeleton.j3o";
  public static final String LOCATION_FOLDER = "/areas";
  public static final float MAX_CAMERA = 20f;
  public static final float ROTATION_CAMERA = 5f;
  public static final float PLAYER_SCALE = 0.1f;
  public static final String FORWARD = "Player_forward_key";
  public static final String BACKWARD = "Player_back_key";
  public static final String LEFT = "Player_left_key";
  public static final String RIGHT = "Player_right_key";
  public static final String STRAFE_LEFT = "Player_sleft_key";
  public static final String STRAFE_RIGHT = "Player_sright_key";
  public static final String EVENT_SPLITTER = "\t";
  public static final Vector3f FORWARD_MOVE = new Vector3f(0,0,1);
  public static final Vector3f BACK_MOVE = new Vector3f(0,0,-1);
  public static final Vector3f LEFT_MOVE = new Vector3f(1,0,0);
  public static final Vector3f RIGHT_MOVE = new Vector3f(-1,0,0);
  private static final float WALK_SPEED = 6f;
  private static final float HOLD_AMOUNT = 0.25f;
  private static final float BOX_SIZE = 50;
  private static final float PLAYER_HEIGHT = 5.3f;
  
  private Game game;
  private ChaseCamera playerCam;
  private float held = 0f;
  private String worldName; // this and player name are used to load game.
  private String playerName;
  private WorldHolder world;
  private Spatial player; // Will be replaced with Entity later, after that
                          // module is built.
  private DirectionalLight sun; // temp since this will exist later
  private Geometry terrain; // Will be obtained from world state later
  private Vector3f moveTo; // will be used to walk to for now.
  
  public PlayerState (String worldName, String playerName)
  {
    this.worldName = worldName;
    this.playerName = playerName;
  }
  
  /**
   * initialize this AppState.
   * 
   * @param manager State Manager that this is being attached to.
   * @param app Application that this is being attached to.
   */
  @Override
  public void initialize (AppStateManager manager, Application app)
  {
    Box tempBox = new Box (BOX_SIZE, 1, BOX_SIZE);
    Material tempMat;
    EventTypeHolder types;
    EventHolder events = null;
    EventType[] typeArr;
    File overTypeLocation = 
            new File ("src/halemaster/ee/world/mainOverworldEvents");
    File typeLocation = new File ("src/halemaster/ee/world/mainLocalEvents");
    this.game = (Game) app;
    
    setClickToMove (this.game.getSettings ().getBoolean (CLICK_NAME));
    setKeys (true);
    
    this.player = this.game.getAssetManager ().loadModel (PLAYER_MODEL);
    this.player.scale (PLAYER_SCALE);
    this.game.getRootNode ().attachChild (this.player);
    this.sun = new DirectionalLight ();
    sun.setDirection(new Vector3f(-0.1f, -0.7f, -1.0f));
    this.game.getRootNode ().addLight (this.sun);
    this.playerCam = new ChaseCamera (this.game.getCamera (), this.player, 
            this.game.getInputManager ());
    this.playerCam.setSmoothMotion(true);
    this.playerCam.setMaxDistance (MAX_CAMERA);
    this.playerCam.setRotationSensitivity (ROTATION_CAMERA);
    
    this.terrain = new Geometry ("Terrain", tempBox);
    tempMat = new Material (this.game.getAssetManager (), 
            "Common/MatDefs/Misc/Unshaded.j3md");
    tempMat.setColor ("Color", ColorRGBA.Orange);
    this.terrain.setMaterial (tempMat);
    this.game.getRootNode ().attachChild (this.terrain);
    this.terrain.move (0, -PLAYER_HEIGHT, 0);
    
    try
    {
      types = new EventTypeHolder ();
      typeArr = EventIO.getTypes (typeLocation);
      for (EventType type : typeArr)
      {
        types.addType (type);
      }
      typeArr = EventIO.getTypes (overTypeLocation);
      for (EventType type : typeArr)
      {
        types.addType (type);
      }
      
      events = EventIO.getEvents (worldName, events, 0, 
              Integer.valueOf (Config.getValue (worldName, "size")), 0, 
              Integer.valueOf (Config.getValue (worldName, "size")), types);
      
      world = new WorldHolder (types, events);
    }
    catch (IOException e)
    {
      // log
    }
    catch (InstantiationException e)
    {
      // log
    }
    catch (IllegalAccessException e)
    {
      // log
    }
    
    super.initialize (manager, app);
  }
  
  /**
   * cleanup this AppState.
   */
  @Override
  public void cleanup ()
  {
    this.game.getRootNode ().detachChild (this.player);
    this.game.getRootNode ().removeLight (this.sun);
    this.game.getRootNode ().detachChild (this.terrain);
    this.game.getInputManager ().removeListener (this);
    
    setClickToMove (false);
    
    this.playerCam = null;
    
    super.cleanup ();
  }
  
  /**
   * Set the movement keys to on or off.
   * 
   * @param on whether to turn keys on or off.
   */
  public void setKeys (boolean on)
  {
    try
    {
      if (on)
      {
        this.game.getInputManager ().addMapping (FORWARD, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (FORWARD).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, FORWARD);
        this.game.getInputManager ().addMapping (BACKWARD, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (BACKWARD).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, BACKWARD);
        this.game.getInputManager ().addMapping (LEFT, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (LEFT).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, LEFT);
        this.game.getInputManager ().addMapping (RIGHT, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (RIGHT).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, RIGHT);
        this.game.getInputManager ().addMapping (STRAFE_LEFT, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (STRAFE_LEFT).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, STRAFE_LEFT);
        this.game.getInputManager ().addMapping (STRAFE_RIGHT, 
              new KeyTrigger (Integer.valueOf(this.game.getSettings ()
                .getString (STRAFE_RIGHT).split (EVENT_SPLITTER)[1])));
        this.game.getInputManager ().addListener (this, STRAFE_RIGHT);
      }
      else
      {
        this.game.getInputManager ().deleteMapping (FORWARD);
        this.game.getInputManager ().deleteMapping (BACKWARD);
        this.game.getInputManager ().deleteMapping (LEFT);
        this.game.getInputManager ().deleteMapping (RIGHT);
        this.game.getInputManager ().deleteMapping (STRAFE_LEFT);
        this.game.getInputManager ().deleteMapping (STRAFE_RIGHT);
      }
    }
    catch (NullPointerException exception)
    {
      LOGGER.log (Level.FINE, "Tried to delete Non-existant", exception);
    }
  }
  
  /**
   * What to set Click to Move to.
   * 
   * @param move whether to turn on Click To Move
   */
  public void setClickToMove (boolean move)
  {
    try
    {
      if (move)
      {
        this.game.getInputManager ().addMapping (CLICK_NAME, 
              new MouseButtonTrigger (MouseInput.BUTTON_LEFT));
        this.game.getInputManager ().addListener (this, CLICK_NAME);
      }
      else
      {
        this.game.getInputManager ().deleteMapping (CLICK_NAME);
      }
    }
    catch (NullPointerException exception)
    {
      LOGGER.log (Level.FINE, "Tried to delete Non-existant", exception);
    }
  }
  
  /**
   * Pause/unpause this State.
   * 
   * @param enable whether to enable this state.
   */
  @Override
  public void setEnabled (boolean enable)
  {
    this.playerCam.setEnabled (enable);
    
    super.setEnabled (enable);
  }
  
  /**
   * update anything that is controlled by this state.
   * 
   * @param tpf the delta since the previous call to update.
   */
  @Override
  public void update (float tpf)
  {
    Vector3f direction;
    if (isEnabled ())
    {
      if (null != this.moveTo)
      {
        direction = this.player.getLocalRotation ().mult(FORWARD_MOVE);
        direction.x = direction.x * tpf * WALK_SPEED;
        direction.y = direction.y * tpf * WALK_SPEED;
        direction.z = direction.z * tpf * WALK_SPEED;
        this.player.move (direction);
        if (0.5f > this.player.getLocalTranslation ().distance (this.moveTo))
        {
          this.moveTo = null;
        }
      }
    }
    
    super.update (tpf);
  }
  
  /**
   * Called when an analog action that is registered with this state happens.
   * 
   * @param action name of action called.
   * @param strength strength of the input signal, or tpf for boolean triggers.
   * @param tpf the time since the last call of this action.
   */
  public void onAnalog (String action, float strength, float tpf)
  {
    Vector3f direction;
    
    if (isEnabled ())
    {
      if (CLICK_NAME.equals (action))
      {
        this.held += tpf;
      }
      else if (FORWARD.equals (action))
      {
        this.moveTo = null;
        direction = this.player.getLocalRotation ().mult(FORWARD_MOVE);
        direction.x = direction.x * tpf * WALK_SPEED;
        direction.y = direction.y * tpf * WALK_SPEED;
        direction.z = direction.z * tpf * WALK_SPEED;
        this.player.move (direction);
      }
      else if (BACKWARD.equals (action))
      {
        this.moveTo = null;
        direction = this.player.getLocalRotation ().mult(BACK_MOVE);
        direction.x = direction.x * tpf * WALK_SPEED;
        direction.y = direction.y * tpf * WALK_SPEED;
        direction.z = direction.z * tpf * WALK_SPEED;
        this.player.move (direction);
      }
      else if (LEFT.equals (action))
      {
        this.moveTo = null;
        this.player.rotate (0, tpf, 0);
      }
      else if (RIGHT.equals (action))
      {
        this.moveTo = null;
        this.player.rotate (0, -tpf, 0);
      }
      else if (STRAFE_LEFT.equals (action))
      {
        this.moveTo = null;
        direction = this.player.getLocalRotation ().mult(LEFT_MOVE);
        direction.x = direction.x * tpf * WALK_SPEED;
        direction.y = direction.y * tpf * WALK_SPEED;
        direction.z = direction.z * tpf * WALK_SPEED;
        this.player.move (direction);
      }
      else if (STRAFE_RIGHT.equals (action))
      {
        this.moveTo = null;
        direction = this.player.getLocalRotation ().mult(RIGHT_MOVE);
        direction.x = direction.x * tpf * WALK_SPEED;
        direction.y = direction.y * tpf * WALK_SPEED;
        direction.z = direction.z * tpf * WALK_SPEED;
        this.player.move (direction);
      }
    }
  }
  /**
   * Called when a boolean action that is registered with this state happens.
   * 
   * @param action name of action called.
   * @param clicked false if the action is ongoing.
   * @param tpf the time since the last call of this action.
   */
  public void onAction (String action, boolean clicked, float tpf)
  {
    CollisionResults results;
    CollisionResult closest;
    Ray ray;
    Vector3f contact;
    
    if (isEnabled ())
    {
      if (CLICK_NAME.equals (action) && !clicked)
      {
        if (this.held < HOLD_AMOUNT)
        {
          results = new CollisionResults ();
          /*
           * This ray is using where the player clicked on screen in order to find
           * a location on the terrain to use. This is quite useful for us.
           */
          ray = new Ray (this.game.getCamera ().getWorldCoordinates 
                  (this.game.getInputManager ().getCursorPosition (), 0.0f), 
                  this.game.getCamera ().getWorldCoordinates 
                  (this.game.getInputManager ().getCursorPosition (), 0.3f)
                  .subtractLocal (this.game.getCamera ().getWorldCoordinates 
                  (this.game.getInputManager ().getCursorPosition (), 0.0f))
                  .normalizeLocal ());
          this.terrain.collideWith (ray, results);

          if (results.size () > 0)
          {
            closest = results.getClosestCollision ();
            contact = closest.getContactPoint ();
            contact.y = this.player.getLocalTranslation ().y;
            this.moveTo = contact;
            this.player.lookAt (this.moveTo, Vector3f.ZERO);
          }
        }

        this.held = 0f;
      }
    }
  }
}
