package halemaster.ee.world.history.event.structures.types;

import halemaster.ee.world.Area;
import halemaster.ee.world.Biome;
import halemaster.ee.world.history.event.Event;
import halemaster.ee.world.history.event.structures.EventObject;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Queue;
import java.util.Random;

/**
 * @name EventSettlement
 * 
 * @version 0.0.0
 * 
 * @date Nov 19, 2013
 */
public class EventSettlement implements EventObject
{
  public static final String ID = "settlement";
  public static final String SEPARATOR = ";";
  public static final int SPACING = 10;
  public static final int HABITUALITY_SPACE = 5;
  public static final int SIZE_PER_GROWTH_MAX = 256;
  public static final int SIZE_PER_GROWTH_MIN = 64;
  private String name;
  private Event event;
  private Random random;
  private Area center = Area.ANYWHERE;
  private int size = 1;
  private ArrayList<Area> growth = new ArrayList<Area>();
  
  public void setEvent (Event event)
  {
    this.event = event;
  }
  
  public void init (Random random)
  {
    // get a random name here
    this.random = random;
    this.name = "settlement" + String.valueOf(random.nextInt ());
    this.size = random.nextInt (SIZE_PER_GROWTH_MAX - SIZE_PER_GROWTH_MIN) 
            + SIZE_PER_GROWTH_MIN;
  }

  public String getValue ()
  {
    String value = this.name + SEPARATOR + this.center.getX () + SEPARATOR + 
            this.center.getY () + SEPARATOR + this.size;
    
    for (Area grow : this.growth)
    {
      value += SEPARATOR + grow.getX () + SEPARATOR + grow.getY ();
    }
    
    return value;
  }
  
  public String getPrint ()
  {
    return this.name;
  }
  
  public void setValue (String value)
  {
    int x, y;
    String[] values = value.split (SEPARATOR);
    
    this.name = values[0];
    x = Integer.valueOf (values[1]);
    y = Integer.valueOf (values[2]);
    this.size = Integer.valueOf (values[3]);
    this.center = new Area (x, y);
    
    for (int i = 4; i < values.length; i+= 2)
    {
      x = Integer.valueOf (values[i]);
      y = Integer.valueOf (values[i + 1]);
      this.growth.add (new Area (x, y));
    }
  }
  
  public String getType ()
  {
    return ID;
  }

  public void modify (EventObject modifier, String type)
  {
    
  }
  
  public Area getAvailableGrowth ()
  {
    Area newGrowth = null;
    ArrayList<Area> possible = new ArrayList<Area>();
    HashMap<String, Area> notPossible = new HashMap<String, Area>();
    String loc;
    
    if (null != this.center)
    {
      possible.add (new Area (center.getX () + 1, center.getY ()));
      possible.add (new Area (center.getX () - 1, center.getY ()));
      possible.add (new Area (center.getX (), center.getY () + 1));
      possible.add (new Area (center.getX (), center.getY () - 1));
      notPossible.put (String.valueOf (center.getX ()) + "," + String.valueOf (
        center.getY ()), center);
      
      for (Area temp : this.growth)
      {
        for (int index = 0; index < possible.size (); index++)
        {
          if (possible.get (index).getX () == temp.getX () && 
                  possible.get (index).getY () == temp.getY ())
          {
            possible.remove (index);
            loc = String.valueOf (temp.getX () + 1) + "," + String.valueOf (
              temp.getY ());
            if (null == notPossible.get (loc) && 0 <= temp.getX () + 1 && 
                    this.event.getHolder ().getWorldSize () > temp.getX () + 1 
                    && 0 <= temp.getY () && 
                    this.event.getHolder ().getWorldSize () > temp.getY () 
                    && 0 < this.event.getHolder ()
                    .getWorld ()[temp.getX () + 1][temp.getY ()]
                    .getHabituality ())
            {
              possible.add (new Area (temp.getX () + 1, temp.getY ()));
            }
            loc = String.valueOf (temp.getX () - 1) + "," + String.valueOf (
              temp.getY ());
            if (null == notPossible.get (loc) && 0 <= temp.getX () - 1 && 
                    this.event.getHolder ().getWorldSize () > temp.getX () - 1 
                    && 0 <= temp.getY () && 
                    this.event.getHolder ().getWorldSize () > temp.getY () 
                    && 0 < this.event.getHolder ()
                    .getWorld ()[temp.getX () - 1][temp.getY ()]
                    .getHabituality ())
            {
              possible.add (new Area (temp.getX () - 1, temp.getY ()));
            }
            loc = String.valueOf (temp.getX ()) + "," + String.valueOf (
              temp.getY () + 1);
            if (null == notPossible.get (loc) && 0 <= temp.getX () && 
                    this.event.getHolder ().getWorldSize () > temp.getX () 
                    && 0 <= temp.getY () + 1 && 
                    this.event.getHolder ().getWorldSize () > temp.getY () + 1
                    && 0 < this.event.getHolder ()
                    .getWorld ()[temp.getX ()][temp.getY () + 1]
                    .getHabituality ())
            {
              possible.add (new Area (temp.getX (), temp.getY () + 1));
            }
            loc = String.valueOf (temp.getX ()) + "," + String.valueOf (
              temp.getY () - 1);
            if (null == notPossible.get (loc) && 0 <= temp.getX () && 
                    this.event.getHolder ().getWorldSize () > temp.getX () 
                    && 0 <= temp.getY () - 1 && 
                    this.event.getHolder ().getWorldSize () > temp.getY () - 1
                    && 0 < this.event.getHolder ()
                    .getWorld ()[temp.getX ()][temp.getY () - 1]
                    .getHabituality ())
            {
              possible.add (new Area (temp.getX (), temp.getY () - 1));
            }
            loc = String.valueOf (temp.getX ()) + "," + String.valueOf (
              temp.getY ());
            notPossible.put (loc, temp);
          }
        }
      }
      
      newGrowth = possible.get (this.random.nextInt (possible.size ()));
    }
    return newGrowth;
  }
  
  public Area findAvailableCenter ()
  {
    Area newCenter = null;
    Biome[][] world = this.event.getHolder ().getWorld ();
    Queue<Area> nextPoints = new ArrayDeque<Area>();
    HashSet<Area> visited = new HashSet<Area>();
    Area currentPoint = new Area (this.random.nextInt 
            (this.event.getHolder ().getWorldSize ()), this.random.nextInt 
            (this.event.getHolder ().getWorldSize ()));
    byte habituality = Byte.MAX_VALUE;
    
    while (null == newCenter)
    {
      if (habituality <= world[currentPoint.getX ()][currentPoint.getY ()]
              .getHabituality ())
      {
        newCenter = currentPoint;
      }
      else
      {
        Area nextPoint;
        if (0 <= currentPoint.getX () + SPACING && world.length > 
                currentPoint.getX () + SPACING && 0 <= currentPoint.getY () && 
                world.length > currentPoint.getY ())
        {
          nextPoint = new Area (currentPoint.getX () + SPACING, 
                  currentPoint.getY ());
          if (!visited.contains (nextPoint))
          {
            nextPoints.add (nextPoint);
          }
        }
        if (0 <= currentPoint.getX () - SPACING && world.length > 
                currentPoint.getX () - SPACING && 0 <= currentPoint.getY () && 
                world.length > currentPoint.getY ())
        {
          nextPoint = new Area (currentPoint.getX () - SPACING, 
                  currentPoint.getY ());
          if (!visited.contains (nextPoint))
          {
            nextPoints.add (nextPoint);
          }
        }
        if (0 <= currentPoint.getX () && world.length > 
                currentPoint.getX () && 0 <= currentPoint.getY () + SPACING && 
                world.length > currentPoint.getY () + SPACING)
        {
          nextPoint = new Area (currentPoint.getX (), 
                  currentPoint.getY () + SPACING);
          if (!visited.contains (nextPoint))
          {
            nextPoints.add (nextPoint);
          }
        }
        if (0 <= currentPoint.getX () && world.length > 
                currentPoint.getX () && 0 <= currentPoint.getY () - SPACING && 
                world.length > currentPoint.getY () - SPACING)
        {
          nextPoint = new Area (currentPoint.getX (), 
                  currentPoint.getY () - SPACING);
          if (!visited.contains (nextPoint))
          {
            nextPoints.add (nextPoint);
          }
        }
        
        habituality -= HABITUALITY_SPACE;
        if (habituality <= 0)
        {
          habituality = 1;
        }
        
        for (Area visit : visited)
        {
          if (habituality <= world[visit.getX ()][visit.getY ()]
                  .getHabituality ())
          {
            newCenter = visit;
          }
        }
        
        visited.add (currentPoint);
      }
      currentPoint = nextPoints.poll ();
    }
    
    return newCenter;
  }
  
  public Area getCenter ()
  {
    return this.center;
  }
  
  public void setCenter (int x, int y)
  {
    this.center = new Area (x, y);
  }
  
  public Area[] getGrowth ()
  {
    Area[] growths = new Area[this.growth.size ()];
    
    for (int i = 0; i < growths.length; i++)
    {
      growths[i] = this.growth.get (i);
    }
    
    return growths;
  }
  
  public void addGrowth (int x, int y)
  {
    this.growth.add (new Area (x, y));
    this.size += this.size = random.nextInt (SIZE_PER_GROWTH_MAX - 
            SIZE_PER_GROWTH_MIN) + SIZE_PER_GROWTH_MIN;
  }
  
  public int getSize ()
  {
    return this.size;
  }
}
