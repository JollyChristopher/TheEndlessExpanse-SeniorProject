package halemaster.ee.world.entity;

import halemaster.ee.world.Area;
import halemaster.ee.world.history.event.structures.Tree;
import halemaster.ee.world.micro.WorldHolder;
import java.util.ArrayList;
import java.util.List;

/**
 * @name EntityHolder
 * 
 * @version 0.0.0
 * 
 * @date Feb 11, 2014
 */
public class EntityHolder 
{
  private Tree<Area, List<Entity>> entities = new Tree<Area, List<Entity>>();
  private WorldHolder holder;
  
  public EntityHolder (WorldHolder holder)
  {
    this.holder = holder;
  }
  
  /**
   * Get the entities at the given location
   * @param x x to get entities at
   * @param y y to get entities at
   * @return 
   */
  public List<Entity> getEntities (int x, int y)
  {
    return this.entities.get (new Area (x, y));
  }
  
  /**
   * Get all entities in the holder
   * @return all entities in the holder
   */
  public List<Entity> getAllEntities ()
  {
    List<Entity> allEntities = new ArrayList<Entity> ();
    
    for (List<Entity> entitySet : this.entities.getAll ())
    {
      for (Entity entity : entitySet)
      {
        allEntities.add (entity);
      }
    }
    
    return allEntities;
  }
  
  /**
   * Get all areas in the holder
   * @return all areas in the holder
   */
  public List<Area> getAreas ()
  {
    List<Area> allAreas = new ArrayList<Area> ();
    
    for (Area area : this.entities.getAllKeys ())
    {
      allAreas.add (area);
    }
    
    return allAreas;
  }
  
  /**
   * Add the given entities to the holder
   * @param entities entities to add 
   */
  public void addEntity (Entity ... entities)
  {
    List<Entity> entitySet;
    for (Entity entity : entities)
    {
      entitySet = this.entities.get (entity.getLocation ());
      if (null == entitySet)
      {
        entitySet = new ArrayList<Entity> ();
        this.entities.put (entity.getLocation (), entitySet);
      }
      
      entitySet.add (entity);
      entity.initialize (this.holder.getPlayerState ().getGame ());
    }
  }
  
  /**
   * Remove the given entities from the holder
   * @param entities entities to remove
   */
  public void removeEntity (Entity ... entities)
  {
    List<Entity> entitySet;
    for (Entity entity : entities)
    {
      entitySet = this.entities.get (entity.getLocation ());
      if (null != entitySet)
      {
        entitySet.remove (entity);
        if (0 == entitySet.size ())
        {
          this.entities.remove (entity.getLocation ());
        }
        entity.unload (this.holder.getPlayerState ().getGame ());
      }
    }
  }
  
  /**
   * Move the given entity to a different location
   * @param entity entity to move
   * @param loc location to move entity
   */
  public void moveEntity (Entity entity, Area loc)
  {
    List<Entity> entitySet;
    entitySet = this.entities.get (entity.getLocation ());
    if (null != entitySet)
    {
      entitySet.remove (entity);
      if (0 == entitySet.size ())
      {
        this.entities.remove (entity.getLocation ());
      }
    }
    
    entity.setLocation (loc);
    entitySet = this.entities.get (entity.getLocation ());
    if (null == entitySet)
    {
      entitySet = new ArrayList<Entity> ();
      this.entities.put (entity.getLocation (), entitySet);
    }

    entitySet.add (entity);
  }
  
  /**
   * Remove all entities at the given location
   * @param x x coordinate to remove at
   * @param y y coordinate to remove at
   * @return list of entities at that location
   */
  public Entity[] removeEntitiesAt (int x, int y)
  {
    List<Entity> removed;
    Entity[] removedArray = null;
    
    removed = this.entities.remove (new Area (x, y));
    if (null != removed)
    {
      removedArray = new Entity[removed.size ()];
      for (int i = 0; i < removedArray.length; i++)
      {
        removedArray[i] = removed.get (i);
      }
    }
    
    return removedArray;
  }
  
  /**
   * update the entity holder
   * @param tpf delta since last update
   */
  public void update (float tpf)
  {
    for (List<Entity> entitySet : this.entities.getAll ())
    {
      for (Entity entity : entitySet)
      {
        entity.update (tpf);
      }
    }
  }
  
  /**
   * Save the given entites to file
   * @param entities entities to save
   */
  public static void saveEntities (Entity[] entities)
  {
    
  }
  
  /**
   * Load entities from the location
   * @param x x coordinate to load
   * @param y y coordiante to load
   * @return array of entities at the given location
   */
  public static Entity[] loadEntities (int x, int y)
  {
    return null;
  }
}
